// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, wasmWasi, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <com.serranofp.kotlin-test-property:kotlin-test-property-core>
open annotation class com.serranofp.kotlin.test.property/PropertyTest : kotlin/Annotation { // com.serranofp.kotlin.test.property/PropertyTest|null[0]
    constructor <init>() // com.serranofp.kotlin.test.property/PropertyTest.<init>|<init>(){}[0]
}

abstract fun interface <#A: out kotlin/Any?> com.serranofp.kotlin.test.property/Generator { // com.serranofp.kotlin.test.property/Generator|null[0]
    abstract fun next(kotlin.random/Random): #A // com.serranofp.kotlin.test.property/Generator.next|next(kotlin.random.Random){}[0]
}

abstract interface com.serranofp.kotlin.test.property/GeneratorContext { // com.serranofp.kotlin.test.property/GeneratorContext|null[0]
    abstract val size // com.serranofp.kotlin.test.property/GeneratorContext.size|{}size[0]
        abstract fun <get-size>(): kotlin/Int // com.serranofp.kotlin.test.property/GeneratorContext.size.<get-size>|<get-size>(){}[0]

    final object Companion { // com.serranofp.kotlin.test.property/GeneratorContext.Companion|null[0]
        final val Default // com.serranofp.kotlin.test.property/GeneratorContext.Companion.Default|{}Default[0]
            final fun <get-Default>(): com.serranofp.kotlin.test.property/GeneratorContext // com.serranofp.kotlin.test.property/GeneratorContext.Companion.Default.<get-Default>|<get-Default>(){}[0]
    }
}

final class com.serranofp.kotlin.test.property/PropertyRunner : com.serranofp.kotlin.test.property/GeneratorContext { // com.serranofp.kotlin.test.property/PropertyRunner|null[0]
    final val size // com.serranofp.kotlin.test.property/PropertyRunner.size|{}size[0]
        final fun <get-size>(): kotlin/Int // com.serranofp.kotlin.test.property/PropertyRunner.size.<get-size>|<get-size>(){}[0]

    final fun <#A1: kotlin/Any?> (com.serranofp.kotlin.test.property/Generator<#A1>).provideDelegate(kotlin/Any?, kotlin.reflect/KProperty<*>): com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue<#A1> // com.serranofp.kotlin.test.property/PropertyRunner.provideDelegate|provideDelegate@com.serranofp.kotlin.test.property.Generator<0:0>(kotlin.Any?;kotlin.reflect.KProperty<*>){0§<kotlin.Any?>}[0]

    final value class <#A1: kotlin/Any?> GeneratedValue { // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue|null[0]
        constructor <init>(#A1) // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue.<init>|<init>(1:0){}[0]

        final val value // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue.value|{}value[0]
            final fun <get-value>(): #A1 // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue.value.<get-value>|<get-value>(){}[0]

        final fun equals(kotlin/Any?): kotlin/Boolean // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue.equals|equals(kotlin.Any?){}[0]
        final fun getValue(kotlin/Any?, kotlin.reflect/KProperty<*>): #A1 // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue.getValue|getValue(kotlin.Any?;kotlin.reflect.KProperty<*>){}[0]
        final fun hashCode(): kotlin/Int // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // com.serranofp.kotlin.test.property/PropertyRunner.GeneratedValue.toString|toString(){}[0]
    }
}

final fun (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/boolean(): com.serranofp.kotlin.test.property/Generator<kotlin/Boolean> // com.serranofp.kotlin.test.property/boolean|boolean(com.serranofp.kotlin.test.property.GeneratorContext)(){}[0]
final fun (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/char(kotlin.ranges/CharRange = ...): com.serranofp.kotlin.test.property/Generator<kotlin/Char> // com.serranofp.kotlin.test.property/char|char(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.ranges.CharRange){}[0]
final fun (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/int(kotlin.ranges/IntRange): com.serranofp.kotlin.test.property/Generator<kotlin/Int> // com.serranofp.kotlin.test.property/int|int(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.ranges.IntRange){}[0]
final fun (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/int(kotlin/Int = ..., kotlin/Int = ...): com.serranofp.kotlin.test.property/Generator<kotlin/Int> // com.serranofp.kotlin.test.property/int|int(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.Int;kotlin.Int){}[0]
final fun (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/long(kotlin.ranges/LongRange): com.serranofp.kotlin.test.property/Generator<kotlin/Long> // com.serranofp.kotlin.test.property/long|long(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.ranges.LongRange){}[0]
final fun (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/long(kotlin/Long = ..., kotlin/Long = ...): com.serranofp.kotlin.test.property/Generator<kotlin/Long> // com.serranofp.kotlin.test.property/long|long(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.Long;kotlin.Long){}[0]
final fun (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/string(kotlin.ranges/CharRange = ..., kotlin/Int = ...): com.serranofp.kotlin.test.property/Generator<kotlin/String> // com.serranofp.kotlin.test.property/string|string(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.ranges.CharRange;kotlin.Int){}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext), kotlin/Function3<#A, #B, #C, #D>).com.serranofp.kotlin.test.property/by(com.serranofp.kotlin.test.property/Generator<#A>, com.serranofp.kotlin.test.property/Generator<#B>, com.serranofp.kotlin.test.property/Generator<#C>): com.serranofp.kotlin.test.property/Generator<#D> // com.serranofp.kotlin.test.property/by|by(com.serranofp.kotlin.test.property.GeneratorContext)@kotlin.Function3<0:0,0:1,0:2,0:3>(com.serranofp.kotlin.test.property.Generator<0:0>;com.serranofp.kotlin.test.property.Generator<0:1>;com.serranofp.kotlin.test.property.Generator<0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext), kotlin/Function2<#A, #B, #C>).com.serranofp.kotlin.test.property/by(com.serranofp.kotlin.test.property/Generator<#A>, com.serranofp.kotlin.test.property/Generator<#B>): com.serranofp.kotlin.test.property/Generator<#C> // com.serranofp.kotlin.test.property/by|by(com.serranofp.kotlin.test.property.GeneratorContext)@kotlin.Function2<0:0,0:1,0:2>(com.serranofp.kotlin.test.property.Generator<0:0>;com.serranofp.kotlin.test.property.Generator<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/pair(com.serranofp.kotlin.test.property/Generator<#A>, com.serranofp.kotlin.test.property/Generator<#B>): com.serranofp.kotlin.test.property/Generator<kotlin/Pair<#A, #B>> // com.serranofp.kotlin.test.property/pair|pair(com.serranofp.kotlin.test.property.GeneratorContext)(com.serranofp.kotlin.test.property.Generator<0:0>;com.serranofp.kotlin.test.property.Generator<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext), com.serranofp.kotlin.test.property/Generator<#A>).com.serranofp.kotlin.test.property/map(kotlin/Function1<#A, #B>): com.serranofp.kotlin.test.property/Generator<#B> // com.serranofp.kotlin.test.property/map|map(com.serranofp.kotlin.test.property.GeneratorContext)@com.serranofp.kotlin.test.property.Generator<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext), kotlin/Function1<#A, #B>).com.serranofp.kotlin.test.property/by(com.serranofp.kotlin.test.property/Generator<#A>): com.serranofp.kotlin.test.property/Generator<#B> // com.serranofp.kotlin.test.property/by|by(com.serranofp.kotlin.test.property.GeneratorContext)@kotlin.Function1<0:0,0:1>(com.serranofp.kotlin.test.property.Generator<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/choice(com.serranofp.kotlin.test.property/Generator<#A>, kotlin/Array<out com.serranofp.kotlin.test.property/Generator<#A>>...): com.serranofp.kotlin.test.property/Generator<#A> // com.serranofp.kotlin.test.property/choice|choice(com.serranofp.kotlin.test.property.GeneratorContext)(com.serranofp.kotlin.test.property.Generator<0:0>;kotlin.Array<out|com.serranofp.kotlin.test.property.Generator<0:0>>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/choose(kotlin/Pair<kotlin/Int, com.serranofp.kotlin.test.property/Generator<#A>>, kotlin/Array<out kotlin/Pair<kotlin/Int, com.serranofp.kotlin.test.property/Generator<#A>>>...): com.serranofp.kotlin.test.property/Generator<#A> // com.serranofp.kotlin.test.property/choose|choose(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.Pair<kotlin.Int,com.serranofp.kotlin.test.property.Generator<0:0>>;kotlin.Array<out|kotlin.Pair<kotlin.Int,com.serranofp.kotlin.test.property.Generator<0:0>>>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/constant(#A): com.serranofp.kotlin.test.property/Generator<#A> // com.serranofp.kotlin.test.property/constant|constant(com.serranofp.kotlin.test.property.GeneratorContext)(0:0){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/from(kotlin.collections/Collection<#A>): com.serranofp.kotlin.test.property/Generator<#A> // com.serranofp.kotlin.test.property/from|from(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.collections.Collection<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/from(kotlin.collections/Iterable<#A>): com.serranofp.kotlin.test.property/Generator<#A> // com.serranofp.kotlin.test.property/from|from(com.serranofp.kotlin.test.property.GeneratorContext)(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/list(com.serranofp.kotlin.test.property/Generator<#A>, kotlin/Int = ...): com.serranofp.kotlin.test.property/Generator<kotlin.collections/List<#A>> // com.serranofp.kotlin.test.property/list|list(com.serranofp.kotlin.test.property.GeneratorContext)(com.serranofp.kotlin.test.property.Generator<0:0>;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/set(com.serranofp.kotlin.test.property/Generator<#A>, kotlin/Int = ...): com.serranofp.kotlin.test.property/Generator<kotlin.collections/Set<#A>> // com.serranofp.kotlin.test.property/set|set(com.serranofp.kotlin.test.property.GeneratorContext)(com.serranofp.kotlin.test.property.Generator<0:0>;kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext), com.serranofp.kotlin.test.property/Generator<#A>).com.serranofp.kotlin.test.property/filter(kotlin/Function1<#A, kotlin/Boolean>): com.serranofp.kotlin.test.property/Generator<#A> // com.serranofp.kotlin.test.property/filter|filter(com.serranofp.kotlin.test.property.GeneratorContext)@com.serranofp.kotlin.test.property.Generator<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext), com.serranofp.kotlin.test.property/Generator<#A>).com.serranofp.kotlin.test.property/orNull(kotlin/Int = ...): com.serranofp.kotlin.test.property/Generator<#A?> // com.serranofp.kotlin.test.property/orNull|orNull(com.serranofp.kotlin.test.property.GeneratorContext)@com.serranofp.kotlin.test.property.Generator<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun com.serranofp.kotlin.test.property/propertyTest(kotlin/Int = ..., com.serranofp.kotlin.test.property/GeneratorContext = ..., kotlin/Int? = ..., kotlin/Boolean = ..., kotlin/Function1<com.serranofp.kotlin.test.property/PropertyRunner, kotlin/Unit>) // com.serranofp.kotlin.test.property/propertyTest|propertyTest(kotlin.Int;com.serranofp.kotlin.test.property.GeneratorContext;kotlin.Int?;kotlin.Boolean;kotlin.Function1<com.serranofp.kotlin.test.property.PropertyRunner,kotlin.Unit>){}[0]
final inline fun <#A: reified kotlin/Any?> (context(com.serranofp.kotlin.test.property/GeneratorContext)).com.serranofp.kotlin.test.property/array(com.serranofp.kotlin.test.property/Generator<#A>, kotlin/Int = ...): com.serranofp.kotlin.test.property/Generator<kotlin/Array<#A>> // com.serranofp.kotlin.test.property/array|array(com.serranofp.kotlin.test.property.GeneratorContext)(com.serranofp.kotlin.test.property.Generator<0:0>;kotlin.Int){0§<kotlin.Any?>}[0]
